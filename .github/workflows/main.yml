name: iOS starter workflow               
on:             
  push:       
    branches:           
      - main                  
  pull_request:    
    branches:    
      - main  
env:
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} 
jobs:
  build: 
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Install the Apple certificate and provisioning profile
        env:
        #   P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        # run: |
        #   # Copy the certificate and provisioning profile to the correct locations
        #   cp Certificates.p12 $RUNNER_TEMP/build_certificate.p12
        #   cp DemoTest.mobileprovision $RUNNER_TEMP/build_pp.mobileprovision
        #   # Import the certificate to the user keychain
        #   security import $RUNNER_TEMP/build_certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k ~/Library/Keychains/login.keychain-db
        #   security list-keychain -d user -s ~/Library/Keychains/login.keychain-db
        #   # Apply the provisioning profile
        #   mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        #   cp $RUNNER_TEMP/build_pp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
        
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Copy Podfile
        run: cp -r SignIn/Podfile .
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod repo list
          pod setup
      - name: Install dependencies
        run: pod install --project-directory=SignIn/
      - name: Check current directory
        run: |
          pwd
          ls -al
      - name: Navigate to SignIn folder
        run: |
          cd SignIn/
          ls
      - name: Update provisioning profile specifier in Xcode project
        run: |
          gem install xcodeproj
          ruby - <<EOF
          require 'xcodeproj'
          # Define the path to your Xcode project
          project_path = 'SignIn/SignIn.xcodeproj'
          # Define the target name
          target_name = 'SignIn'
          # Define the provisioning profile specifier
          provisioning_profile_specifier = "DemoTest"
          # Open the Xcode project
          project = Xcodeproj::Project.open(project_path)
          # Find the target
          target = project.targets.find { |t| t.name == target_name }
          # Update the provisioning profile settings
          target.build_configuration_list.build_configurations.each do |configuration|
            configuration.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = provisioning_profile_specifier
          end
          # Save the changes to the Xcode project file
          project.save
          EOF
      # - name: Build and Archive
      #   id: build_archive
      #   run: |
      #     cd SignIn/
      #     ls
      #     fastlane init
      #     chmod +x ./fastlane/FastlaneRunner
      #     fastlane beta
      - name: build archive
        run: |
          xcodebuild -workspace SignIn/SignIn.xcworkspace \
          -scheme SignIn \
          -archivePath $RUNNER_TEMP/SignIn.xcarchive \
          -sdk iphoneos \
          -configuration development \
          -destination generic/platform=iOS \
          clean archive          

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/SignIn.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build
          cd $RUNNER_TEMP/build
          ls
      # - name: Rename IPA file
      #   run: |
      #     mv $RUNNER_TEMP/build/SignIn.ipa $RUNNER_TEMP/build/SignIn_$(git rev-parse --short HEAD)_$(date +'%m%d%Y')_b1.ipa
      #     cd $RUNNER_TEMP/build
      #     ls
          
      # - name: Upload IPA to Nexus
      #   run: |
      #     curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
      #          --upload-file $RUNNER_TEMP/build/SignIn_$(git rev-parse --short HEAD)_$(date +'%m%d%Y')_b1.ipa \
      #          https://spanartifacts.spanllc.com/repository/Android/iOS/Tax990/

      - name: Install fastlane
        run: |
          gem install fastlane -N
          
      - name: Debug App Store Connect Username
        run: |
          echo "App Store Connect Username: ${{ secrets.APP_STORE_CONNECT_USERNAME }}"
          
      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: $APP_SPECIFIC_PASSWORD
          PILOT_APPLE_ID: $APP_STORE_CONNECT_USERNAME
          
        run: |
          fastlane pilot upload -u $APP_STORE_CONNECT_USERNAME -i "$RUNNER_TEMP/build/SignIn.ipa" -a ${{ secrets.AppBundleID }}         

      - name: Clean up workspace
        run: |
          rm -rf $RUNNER_TEMP/
